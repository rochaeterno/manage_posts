openapi: 3.0.2
info:
  title: ManagePosts - OpenAPI 3.0
  version: 1.0.0
  description: "Este projeto foi desenvolvido com o intuito de pleitear uma vaga na Logaroo e se propõe a apresentar uma API que controle as requisições sobre postagens.  "
  contact:
    email: robertodutraemp@gmail.com
servers:
- url: http://localhost/api
paths:
  /posts:
    post:
      tags:
      - Posts
      summary: Adiciona um novo post ao DB.
      description: Adiciona um novo post ao banco de dados já atrelado a suas tags
      operationId: addPost
      requestBody:
        description: Adiciona um novo post ao banco de dados.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '405':
          description: Invalid input
    get:
      tags:
      - Posts
      summary: Encontra um post pela tag.
      description: Encontra um post com base em uma unica tag fornecida pelo host. Caso nenhuma tag seja fornecida na filtragem a API retornará todas os posts.
      operationId: findPostsByTags
      parameters:
      - name: tag
        in: query
        description: Tags to filter by
        required: false
        explode: true
        schema:
          type: array
          items:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid tag value
  /posts/{postId}:
    put:
      tags:
      - Posts
      summary: Modifica um post já criado.
      description: Usa o id de um Post já existente para encontrar-lo no banco de dados e então modificar-lo.
      operationId: updatePost
      parameters:
      - name: postId
        in: path
        description: id do post a ser modificado.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Update an existent post in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: o id fornecido não é valido
        '404':
          description: Post não encontrado
        '405':
          description: Validation exception
    get:
      tags:
      - Posts
      summary: Encontra um post pelo ID
      description: Retorna um post de acordo com o id inserido.
      operationId: getPostById
      parameters:
      - name: postId
        in: path
        description: id do post a ser retornado.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
            application/xml:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: o id fornecido não é valido
        '404':
          description: Post não encontrado
    delete:
      tags:
      - Posts
      summary: Deleta um post existente
      description: Deleta um post existente mantendo suas tags.
      operationId: deletePost
      parameters:
      - name: postId
        in: path
        description: id do post a ser deletado.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '400':
          description: O post selecionado é invalido.
components:
  schemas:
    Post:
      required:
      - title
      - author
      - content
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Notion
        author:
          type: string
          example: Marcia Thiel
        content:
          type: string
          example: Sed soluta nemo et consectetur reprehenderit ea reprehenderit sit. Aut voluptate sit omnis qui repudiandae. Cum sit provident eligendi tenetur facere ut quo. Commodi voluptate ut aut deleniti.
        tags:
          type: array
          example: ["organization", "planning", "collaboration", "writing", "calendar"]
      xml:
        name: post
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  securitySchemes:
    x-requested-with:
      type: apiKey
      name: x-requested-with
      in: header
